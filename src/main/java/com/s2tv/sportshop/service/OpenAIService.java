package com.s2tv.sportshop.service;


import com.fasterxml.jackson.databind.ObjectMapper;
import com.s2tv.sportshop.config.WebClientConfig;
import com.s2tv.sportshop.dto.request.ProductFilterRequest;
import com.s2tv.sportshop.dto.request.ProductGetAllRequest;
import com.s2tv.sportshop.dto.response.*;
import com.s2tv.sportshop.exception.AppException;
import com.s2tv.sportshop.exception.ErrorCode;
import com.s2tv.sportshop.model.*;
import com.s2tv.sportshop.repository.ProductRepository;
import com.s2tv.sportshop.repository.CategoryRepository;
import com.s2tv.sportshop.repository.ChatHistoryRepository;
import com.s2tv.sportshop.repository.UserRepository;

import lombok.RequiredArgsConstructor;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Service;
import org.springframework.web.reactive.function.client.WebClient;

import java.util.*;
import java.util.stream.Collectors;

@Service
@RequiredArgsConstructor
public class OpenAIService {
    private final ChatHistoryRepository chatHistoryRepository;
    private final CategoryRepository categoryRepository;
    private final UserRepository userRepository;
    private final WebClient openAiClient;
    private final ProductRepository productRepository;
    private final ProductService productService;

    @Value("${openai.api_key}")
    private String openAiApiKey;

    public BotSuggestResponse chatWithBot(String message, String userId, List<ChatHistory.Message> tempHistory) {
        boolean isSuggest = message.toLowerCase().contains("t∆∞ v·∫•n") || message.toLowerCase().contains("g·ª£i √Ω");
        List<ProductShortResponse> shortProducts = List.of();
        String reply;

        if (isSuggest) {
            String filterJson = searchProductFilter(message);
            ProductFilter filter = parseProductFilter(filterJson);
            ProductGetAllRequest.ProductGetAllRequestBuilder builder = ProductGetAllRequest.builder();

            if (filter.getCategory() != null && !filter.getCategory().isBlank()) {
                builder.category(List.of(filter.getCategory()));
            }
            if (filter.getCategoryGender() != null && !filter.getCategoryGender().isBlank()) {
                builder.categoryGender(List.of(filter.getCategoryGender()));
            }
            if (filter.getCategorySub() != null && !filter.getCategorySub().isBlank()) {
                builder.categorySub(List.of(filter.getCategorySub()));
            }
            if (filter.getPriceMin() != null) builder.priceMin(filter.getPriceMin().doubleValue());
            if (filter.getPriceMax() != null) builder.priceMax(filter.getPriceMax().doubleValue());
            if (filter.getProductColor() != null && !filter.getProductColor().isBlank()) {
                builder.productColor(List.of(filter.getProductColor()));
            }
            if (filter.getProductBrand() != null && !filter.getProductBrand().isBlank()) {
                builder.productBrand(List.of(filter.getProductBrand()));
            }

            ProductGetAllRequest request = builder.build();
            ProductGetAllResponse response = productService.getAllProduct(request);
            List<ProductGetDetailsResponse> products = response.getProducts();
            List<ProductGetDetailsResponse> showProducts = products.subList(0, Math.min(3, products.size()));

            StringBuilder sb = new StringBuilder();
            sb.append("B·∫°n l√† tr·ª£ l√Ω b√°n h√†ng WTM. Kh√°ch h·ªèi: \"").append(message).append("\".");
            if (response.getTotal() == 0) {
                sb.append(" Hi·ªán t·∫°i kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m ph√π h·ª£p v·ªõi y√™u c·∫ßu n√†y. "
                        + "Ch·ªâ tr·∫£ l·ªùi ƒë√∫ng c√¢u n√†y, tuy·ªát ƒë·ªëi kh√¥ng th√™m g√¨ kh√°c.");
            } else {
                sb.append("""
                Danh s√°ch s·∫£n ph·∫©m ph√π h·ª£p ƒë√£ ƒë∆∞·ª£c h·ªá th·ªëng g·ª≠i cho kh√°ch. 
                Y√äU C·∫¶U: 
                - KH√îNG li·ªát k√™ l·∫°i t√™n ho·∫∑c m√¥ t·∫£ b·∫•t k·ª≥ s·∫£n ph·∫©m n√†o.
                - KH√îNG gi·ªõi thi·ªáu l·∫°i s·∫£n ph·∫©m, KH√îNG ƒë∆∞a ra ƒë√°nh gi√° t·ªïng th·ªÉ.
                - KH√îNG vi·∫øt l·∫°i danh s√°ch.
                - Ch·ªâ ƒë∆∞·ª£c ph√©p n√≥i 1 c√¢u ng·∫Øn g·ªçn, v√≠ d·ª•: "B·∫°n c√≥ th·ªÉ xem chi ti·∫øt c√°c s·∫£n ph·∫©m ph√≠a d∆∞·ªõi v√† l·ª±a ch·ªçn s·∫£n ph·∫©m ph√π h·ª£p nh·∫•t." 
                - KH√îNG tr·∫£ l·ªùi th√™m b·∫•t c·ª© ƒëi·ªÅu g√¨ kh√°c, KH√îNG qu·∫£ng c√°o.
                """);
            }

            List<ChatHistory.Message> promptMsg = List.of(new ChatHistory.Message("system", sb.toString()));
            reply = callOpenAItoChat(promptMsg, "gpt-4");

            shortProducts = showProducts.stream()
                    .map(p -> ProductShortResponse.builder()
                            .id(p.getId())
                            .productTitle(p.getProductTitle())
                            .productImg(p.getProductImg())
                            .productPrice(p.getProductPrice())
                            .build())
                    .toList();

            if (userId != null) {
                ChatHistory chat = chatHistoryRepository.findByUserId(userId)
                        .orElseGet(() -> ChatHistory.builder()
                                .userId(userId)
                                .messages(new ArrayList<>(List.of(
                                        new ChatHistory.Message("system", "B·∫°n l√† tr·ª£ l√Ω b√°n h√†ng c·ªßa c·ª≠a h√†ng b√°n ƒë·ªì th·ªÉ thao WTM.")
                                )))
                                .build());

                chat.getMessages().add(new ChatHistory.Message("user", message));
                // üëá Th√™m c·∫£ reply v√† shortProducts v√†o assistant message
                chat.getMessages().add(new ChatHistory.Message("assistant", reply, shortProducts));
                chat.setUpdatedAt(new Date());
                chatHistoryRepository.save(chat);
            }
        } else {
            List<ChatHistory.Message> messages = new ArrayList<>();
            messages.add(new ChatHistory.Message("system", "B·∫°n l√† tr·ª£ l√Ω b√°n h√†ng c·ªßa c·ª≠a h√†ng b√°n ƒë·ªì th·ªÉ thao WTM."));
            if (tempHistory != null) messages.addAll(tempHistory);
            messages.add(new ChatHistory.Message("user", message));
            reply = callOpenAItoChat(messages, "gpt-4");
            shortProducts = List.of();

            if (userId != null) {
                ChatHistory chat = chatHistoryRepository.findByUserId(userId)
                        .orElseGet(() -> ChatHistory.builder()
                                .userId(userId)
                                .messages(new ArrayList<>(List.of(
                                        new ChatHistory.Message("system", "B·∫°n l√† tr·ª£ l√Ω b√°n h√†ng c·ªßa c·ª≠a h√†ng b√°n ƒë·ªì th·ªÉ thao WTM.")
                                )))
                                .build());

                chat.getMessages().add(new ChatHistory.Message("user", message));
                chat.getMessages().add(new ChatHistory.Message("assistant", reply));
                chat.setUpdatedAt(new Date());
                chatHistoryRepository.save(chat);
            }
        }

        return BotSuggestResponse.builder()
                .message(reply)
                .products(shortProducts)
                .build();
    }


    public ProductFilter parseProductFilter(String filterJson) {
        ObjectMapper objectMapper = new ObjectMapper();
        try {
            return objectMapper.readValue(filterJson, ProductFilter.class);
        } catch (Exception e) {
            throw new AppException(ErrorCode.INVALID_JSON, "Kh√¥ng th·ªÉ parse filter JSON: " + e.getMessage());
        }
    }


    public String searchProductFilter(String message){
        List<Category> level1 = categoryRepository.findByCategoryLevel(1);
        List<Category> level2 = categoryRepository.findByCategoryLevel(2);

        String parentCategories = level1.stream()
                .map(Category::getCategoryType)
                .distinct()
                .collect(Collectors.joining(", "));

        String subCategories = level2.stream()
                .map(Category::getCategoryType)
                .distinct()
                .collect(Collectors.joining(", "));

        String systemPrompt = String.format("""
            D·ª±a v√†o th√¥ng tin message c·ªßa ng∆∞·ªùi d√πng, h√£y tr√≠ch xu·∫•t filter theo ƒë·ªãnh d·∫°ng sau:
            {
              "category": string (b·∫Øt bu·ªôc, ph·∫£i l√† m·ªôt gi√° tr·ªã trong danh s√°ch: [%s]; l·∫•y theo category_type, n·∫øu message c√≥ l·ªói ch√≠nh t·∫£ ho·∫∑c d√πng t·ª´ g·∫ßn ƒë√∫ng th√¨ h√£y t·ª± ƒë·ªông chuy·ªÉn ƒë·ªïi sang category ph√π h·ª£p nh·∫•t),
              "category_gender": string (gi·ªõi t√≠nh: Nam, N·ªØ, Unisex; n·∫øu kh√¥ng c√≥ th√¨ ƒë·ªÉ tr·ªëng),
              "category_sub": string (n·∫øu c√≥, n·∫±m trong danh s√°ch: [%s]; l·∫•y category_type, c≈©ng c·∫ßn t·ª± ƒë·ªông s·ª≠a l·ªói ch√≠nh t·∫£ ho·∫∑c ch·ªçn g·∫ßn ƒë√∫ng),
              "price_min": number (n·∫øu c√≥),
              "price_max": number (n·∫øu c√≥),
              "product_color": string (n·∫øu c√≥, vi·∫øt hoa ch·ªØ c√°i ƒë·∫ßu),
              "product_brand": string (n·∫øu c√≥, vi·∫øt hoa ch·ªØ c√°i ƒë·∫ßu)
            }
            L∆∞u √Ω:
            - N·∫øu kh√¥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c ch√≠nh x√°c category t·ª´ message do l·ªói ch√≠nh t·∫£, h√£y c·ªë g·∫Øng ƒëo√°n v√† chuy·ªÉn th√†nh category ph√π h·ª£p nh·∫•t trong danh s√°ch.
            - Ch·ªâ tr·∫£ v·ªÅ chu·ªói JSON, kh√¥ng gi·∫£i th√≠ch g√¨ th√™m.
            """, parentCategories, subCategories);

        List<ProductFilterRequest.Message> messages = List.of(
                new ProductFilterRequest.Message("system", systemPrompt),
                new ProductFilterRequest.Message("user", message)
        );

        return callOpenAItoProductFilter(messages, "gpt-4");
    }


    private String callOpenAItoProductFilter(List<ProductFilterRequest.Message> messages, String model) {
        ProductFilterRequest request = new ProductFilterRequest(model, messages);

        OpenAIResponse response = openAiClient.post()
                .uri("/chat/completions")
                .header(HttpHeaders.AUTHORIZATION, "Bearer " + openAiApiKey)
                .contentType(MediaType.APPLICATION_JSON)
                .bodyValue(request)
                .retrieve()
                .bodyToMono(OpenAIResponse.class)
                .block();

        if (response != null && response.getChoices() != null && !response.getChoices().isEmpty()) {
            return response.getChoices().getFirst().getMessage().getContent();
        }

        return "C√≥ l·ªói x·∫£y ra";
    }

    public void appendSearchHistory(String userId, String message, String filters) {
        User user = userRepository.findById(userId)
                .orElseThrow(() -> new AppException(ErrorCode.USER_NON_EXISTED));

        SearchHistory searchHistory = new SearchHistory();
        searchHistory.setMessage(message);
        searchHistory.setFilters(filters);
        searchHistory.setSearchedAt(new Date());

        if (user.getSearchhistory() == null) {
            user.setSearchhistory(new ArrayList<>());
        }

        user.getSearchhistory().add(searchHistory);

        userRepository.save(user);
    }



    public Boolean checkSensitiveFeedback(String feedbackContent) {
        String systemPrompt = """
        B·∫°n l√† m·ªôt b·ªô l·ªçc ki·ªÉm tra n·ªôi dung ph·∫£n h·ªìi c·ªßa ng∆∞·ªùi d√πng. 
        H√£y ph√¢n t√≠ch ƒëo·∫°n vƒÉn sau v√† tr·∫£ l·ªùi ch·ªâ b·∫±ng 1 t·ª´: "c√≥" n·∫øu ch·ª©a n·ªôi dung nh·∫°y c·∫£m 
        (th√¥ t·ª•c, b·∫°o l·ª±c, x√∫c ph·∫°m, ph√¢n bi·ªát ch·ªßng t·ªôc, gi·ªõi t√≠nh, ch√≠nh tr·ªã...) ho·∫∑c "kh√¥ng" n·∫øu an to√†n.
        Kh√¥ng c·∫ßn gi·∫£i th√≠ch.
        """;

        List<ProductFilterRequest.Message> messages = List.of(
                new ProductFilterRequest.Message("system", systemPrompt),
                new ProductFilterRequest.Message("user", feedbackContent)
        );

        System.out.println("feedbackContent" + feedbackContent);
        String result = callOpenAItoProductFilter(messages, "gpt-4");
        System.out.println("result" + result);
        return "c√≥".equalsIgnoreCase(result.trim());
    }

    private String callOpenAItoChat(List<ChatHistory.Message> messages, String model) {
        Map<String, Object> requestBody = Map.of(
                "model", model,
                "messages", messages
        );

        OpenAIResponse response = openAiClient.post()
                .uri("/chat/completions")
                .header(HttpHeaders.AUTHORIZATION, "Bearer " + openAiApiKey)
                .contentType(MediaType.APPLICATION_JSON)
                .bodyValue(requestBody)
                .retrieve()
                .bodyToMono(OpenAIResponse.class)
                .block();

        if (response != null && response.getChoices() != null && !response.getChoices().isEmpty()) {
            return response.getChoices().getFirst().getMessage().getContent();
        }

        return "C√≥ l·ªói x·∫£y ra";
    }

    public String compareProducts(String productIdA, String productIdB) {
        Product a = productRepository.findById(productIdA)
                .orElseThrow(() -> new AppException(ErrorCode.PRODUCT_NOT_FOUND, "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m ƒë·∫ßu ti√™n"));
        Product b = productRepository.findById(productIdB)
                .orElseThrow(() -> new AppException(ErrorCode.PRODUCT_NOT_FOUND, "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m th·ª© hai"));

        Category categoryA = categoryRepository.findById(a.getProductCategory())
                .orElseThrow(() -> new AppException(ErrorCode.CATEGORY_NOT_FOUND, "Kh√¥ng t√¨m th·∫•y danh m·ª•c s·∫£n ph·∫©m ƒë·∫ßu ti√™n"));

        Category categoryB = categoryRepository.findById(b.getProductCategory())
                .orElseThrow(() -> new AppException(ErrorCode.CATEGORY_NOT_FOUND, "Kh√¥ng t√¨m th·∫•y danh m·ª•c s·∫£n ph·∫©m th·ª© hai"));

        if (!a.getProductCategory().equalsIgnoreCase(b.getProductCategory())) {
            throw new AppException(ErrorCode.COMPARE_ERROR);
        }

        String systemPrompt = """
        B·∫°n l√† chuy√™n gia t∆∞ v·∫•n s·∫£n ph·∫©m th·ªÉ thao.
        So s√°nh hai s·∫£n ph·∫©m sau v·ªÅ: t√™n, th∆∞∆°ng hi·ªáu, danh m·ª•c, gi√°, gi·∫£m gi√°, n·ªïi b·∫≠t, ƒë√°nh gi√° v√† kho c√≤n l·∫°i.
        
        H√£y tr·∫£ v·ªÅ n·ªôi dung so s√°nh chia th√†nh 3 ƒëo·∫°n, m·ªói ƒëo·∫°n n·∫±m trong th·∫ª <p> v·ªõi ti√™u ƒë·ªÅ:
        - <p><strong>Th√¥ng tin chung:</strong>...</p>
        - <p><strong>So s√°nh ƒëi·ªÉm m·∫°nh:</strong>...</p>
        - <p><strong>G·ª£i √Ω l·ª±a ch·ªçn:</strong>...</p>
        
        Kh√¥ng d√πng bullet point, kh√¥ng th√™m vƒÉn b·∫£n b√™n ngo√†i c√°c th·∫ª <p>.
        """;

        String userMessage = String.format("""
        S·∫£n ph·∫©m A:
        T√™n: %s
        Th∆∞∆°ng hi·ªáu: %s
        Danh m·ª•c: %s
        Gi√°: %.0f
        Gi·∫£m gi√°: %.0f%%
        N·ªïi b·∫≠t: %s
        ƒê√°nh gi√°: %.1f sao
        C√≤n l·∫°i: %d s·∫£n ph·∫©m

        S·∫£n ph·∫©m B:
        T√™n: %s
        Th∆∞∆°ng hi·ªáu: %s
        Danh m·ª•c: %s
        Gi√°: %.0f
        Gi·∫£m gi√°: %.0f%%
        N·ªïi b·∫≠t: %s
        ƒê√°nh gi√°: %.1f sao
        C√≤n l·∫°i: %d s·∫£n ph·∫©m
        """,
                a.getProductTitle(), a.getProductBrand(), categoryA.getCategoryType() + " - " + categoryA.getCategoryGender().name(),
                a.getProductPrice(), a.getProductPercentDiscount(),
                a.isProductFamous() ? "C√≥" : "Kh√¥ng", a.getProductRate(), a.getProductCountInStock(),

                b.getProductTitle(), b.getProductBrand(), categoryB.getCategoryType() + " - " + categoryB.getCategoryGender().name(),
                b.getProductPrice(), b.getProductPercentDiscount(),
                b.isProductFamous() ? "C√≥" : "Kh√¥ng", b.getProductRate(), b.getProductCountInStock()
        );

        List<ProductFilterRequest.Message> messages = List.of(
                new ProductFilterRequest.Message("system", systemPrompt),
                new ProductFilterRequest.Message("user", userMessage)
        );

        return callOpenAItoProductFilter(messages, "gpt-4");
    }
}
